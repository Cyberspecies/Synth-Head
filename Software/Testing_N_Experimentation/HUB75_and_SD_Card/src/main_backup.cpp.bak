/*****************************************************************
 * File:      main.cpp
 * Category:  Testing & Experimentation
 * Author:    XCR1793 (Feather Forge)
 * 
 * Purpose:
 *    Dual HUB75 LED matrix display demo that reads PNG images from
 *    SD card and displays them on both matrices simultaneously.
 *****************************************************************/

#include <Arduino.h>
#include <ESP32-HUB75-MatrixPanel-I2S-DMA.h>
#include <SD.h>
#include <SPI.h>
#include <TJpg_Decoder.h>
#include <FS.h>

// --- HUB75 pin definitions ---
#define HUB75_R0 7
#define HUB75_G0 15
#define HUB75_B0 16
#define HUB75_R1 17
#define HUB75_G1 18
#define HUB75_B1 8
#define HUB75_A  41
#define HUB75_B  40
#define HUB75_C  39
#define HUB75_D  38
#define HUB75_E  42
#define HUB75_LAT 36
#define HUB75_OE0 35 // Panel 0
#define HUB75_OE1 6  // Panel 1
#define HUB75_CLK 37

// --- SD Card pin definitions ---
#define SD_HOST SPI2_HOST
#define SD_MOSI 21
#define SD_MISO 48
#define SD_CLK  47
#define SD_CS   14

// --- Display configuration ---
#define PANEL_RES_X 64  // Number of pixels wide of each INDIVIDUAL panel module
#define PANEL_RES_Y 32  // Number of pixels tall of each INDIVIDUAL panel module
#define PANEL_CHAIN 1   // Total number of panels chained one to another

// --- Global variables ---
MatrixPanel_I2S_DMA *display_panel0 = nullptr;
MatrixPanel_I2S_DMA *display_panel1 = nullptr;
bool sd_initialized = false;
String current_image_file = "";

/** Initialize SD card
 * @return true if initialization successful
 */
bool initializeSDCard(){
  Serial.println("Initializing SD card...");
  
  SPI.begin(SD_CLK, SD_MISO, SD_MOSI, SD_CS);
  
  if(!SD.begin(SD_CS)){
    Serial.println("SD card initialization failed!");
    return false;
  }
  
  Serial.println("SD card initialized successfully");
  return true;
}

/** Initialize HUB75 displays
 * @return true if initialization successful
 */
bool initializeDisplays(){
  Serial.println("Initializing HUB75 displays...");
  
  // Configuration for display
  HUB75_I2S_CFG::i2s_pins pins = {
    HUB75_R0, HUB75_G0, HUB75_B0, HUB75_R1, HUB75_G1, HUB75_B1,
    HUB75_A, HUB75_B, HUB75_C, HUB75_D, HUB75_E,
    HUB75_LAT, HUB75_OE0, HUB75_CLK  // Start with Panel 0
  };
  
  HUB75_I2S_CFG mxconfig(
    PANEL_RES_X,
    PANEL_RES_Y,
    PANEL_CHAIN,
    pins
  );
  
  // Set additional configuration options
  mxconfig.double_buff = true;
  mxconfig.clkphase = false;
  
  // Initialize first display (Panel 0)
  display_panel0 = new MatrixPanel_I2S_DMA(mxconfig);
  if(!display_panel0->begin()){
    Serial.println("Failed to initialize display panel 0");
    return false;
  }
  
  display_panel0->setBrightness8(128); // Set brightness to 50%
  display_panel0->clearScreen();
  Serial.println("Display panel 0 initialized successfully");
  
  // For now, let's just use one panel to test
  display_panel1 = nullptr;
  
  Serial.println("HUB75 display initialized successfully");
  return true;
}

/** TJpg_Decoder callback function to output to both displays
 * @param x X coordinate
 * @param y Y coordinate  
 * @param w Width of the decoded block
 * @param h Height of the decoded block
 * @param bitmap Pointer to the bitmap data
 * @return true to continue decoding
 */
bool displayOutput(int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t* bitmap){
  if(y >= PANEL_RES_Y) return true; // Stop if outside display bounds
  
  // Display on both panels
  for(uint16_t j = 0; j < h; j++){
    for(uint16_t i = 0; i < w; i++){
      if((x + i) < PANEL_RES_X && (y + j) < PANEL_RES_Y){
        uint16_t pixel = bitmap[j * w + i];
        
        // Draw to both displays
        display_panel0->drawPixel(x + i, y + j, pixel);
        display_panel1->drawPixel(x + i, y + j, pixel);
      }
    }
  }
  
  return true;
}

/** Find first image file on SD card (PNG or JPG)
 * @return filename if found, empty string if not found
 */
String findFirstImageFile(){
  File root = SD.open("/");
  if(!root){
    Serial.println("Failed to open root directory");
    return "";
  }
  
  File file = root.openNextFile();
  while(file){
    String filename = file.name();
    if(filename.endsWith(".png") || filename.endsWith(".PNG") ||
       filename.endsWith(".jpg") || filename.endsWith(".JPG") ||
       filename.endsWith(".jpeg") || filename.endsWith(".JPEG")){
      Serial.println("Found image file: " + filename);
      file.close();
      root.close();
      return filename;
    }
    file.close();
    file = root.openNextFile();
  }
  
  root.close();
  Serial.println("No image files found on SD card");
  return "";
}

/** Load and display image from SD card
 * @param filename Name of the image file to load
 * @return true if successful
 */
bool loadAndDisplayImage(const String& filename){
  Serial.println("Loading image: " + filename);
  
  // Clear both displays first
  display_panel0->clearScreen();
  display_panel1->clearScreen();
  
  // Set the callback function for TJpg_Decoder
  TJpgDec.setCallback(displayOutput);
  
  // Decode and display the image
  if(TJpgDec.drawSdJpg(0, 0, filename.c_str()) != 0){
    Serial.println("Failed to decode image: " + filename);
    return false;
  }
  
  Serial.println("Image displayed successfully on both panels");
  return true;
}

/** Display test pattern on both matrices
 */
void displayTestPattern(){
  Serial.println("Displaying test pattern");
  
  // Clear display
  display_panel0->clearScreen();
  
  // Draw some basic patterns to test
  Serial.println("Drawing red square...");
  display_panel0->fillRect(0, 0, 10, 10, display_panel0->color565(255, 0, 0));
  
  Serial.println("Drawing green square...");
  display_panel0->fillRect(20, 0, 10, 10, display_panel0->color565(0, 255, 0));
  
  Serial.println("Drawing blue square...");
  display_panel0->fillRect(40, 0, 10, 10, display_panel0->color565(0, 0, 255));
  
  Serial.println("Drawing white line...");
  display_panel0->drawLine(0, 15, PANEL_RES_X-1, 15, display_panel0->color565(255, 255, 255));
  
  // Draw gradient pattern
  Serial.println("Drawing gradient...");
  for(int i = 0; i < PANEL_RES_X && i < 32; i++){
    for(int j = 20; j < PANEL_RES_Y && j < 32; j++){
      uint8_t red = (i * 255) / 31;
      uint8_t green = (j * 255) / 31;
      uint16_t color = display_panel0->color565(red, green, 128);
      display_panel0->drawPixel(i, j, color);
    }
  }
  
  Serial.println("Test pattern complete");
}

void setup(){
  Serial.begin(115200);
  delay(2000);  // Give more time for serial to initialize
  
  Serial.println("=== Dual HUB75 Display Demo ===");
  Serial.println("Initializing...");
  
  // Initialize displays first
  if(!initializeDisplays()){
    Serial.println("Display initialization failed!");
    while(1){
      delay(1000);
      Serial.println("Stuck in setup - display init failed");
    }
  }
  
  Serial.println("Displays initialized, showing test pattern...");
  displayTestPattern();
  
  // Skip SD card and image loading for now to focus on display
  Serial.println("Setup complete - displays should be showing test pattern");
}

void loop(){
  // Keep displays active with a simple animation
  static unsigned long last_update = 0;
  static int counter = 0;
  
  if(millis() - last_update > 1000){
    // Blink a pixel to show the system is running
    if(counter % 2 == 0){
      display_panel0->drawPixel(0, 0, display_panel0->color565(255, 255, 255));
    }else{
      display_panel0->drawPixel(0, 0, display_panel0->color565(0, 0, 0));
    }
    
    counter++;
    last_update = millis();
    Serial.println("Loop running, counter: " + String(counter));
  }
  
  delay(10);
}