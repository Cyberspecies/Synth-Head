#include <Arduino.h>
#include "GpsParser.h"

#define GPS_BAUD 9600
#define GPS_RX_PIN 44
#define GPS_TX_PIN 43

// Create GPS parser instance (using UART 2)
GpsParser gps(2);

void setup(){
  // Serial Monitor
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("\n=== GPS Test Program ===");
  Serial.println("Parsing NMEA sentences from NEO-M8 GPS");
  Serial.println("Pins: RX=GPIO44, TX=GPIO43, Baud=9600\n");
  
  // Initialize GPS parser
  gps.begin(GPS_RX_PIN, GPS_TX_PIN, GPS_BAUD);
  Serial.println("GPS Serial started!\n");
}

void loop(){
  // Update GPS parser (processes incoming data)
  gps.update();
  
  // Print parsed GPS data every second
  static unsigned long last_print = 0;
  if(millis() - last_print >= 1000){
    last_print = millis();
    
    // Demonstrate three ways to access GPS data:
    
    // Method 1: Individual getters (least efficient if you need multiple values)
    Serial.println("\n=== Method 1: Individual Getters ===");
    Serial.print("Time (UTC):    "); Serial.println(gps.getTimeUtc());
    Serial.print("Fix Quality:   "); Serial.println(gps.getFixQualityString());
    Serial.print("Satellites:    "); Serial.println(gps.getSatellites());
    
    // Method 2: Get location data (lat, lon, alt) - efficient for position only
    Serial.println("\n=== Method 2: Location Struct ===");
    GpsLocation loc = gps.getLocation();
    Serial.print("Latitude:      "); Serial.print(loc.latitude, 6); Serial.println("째");
    Serial.print("Longitude:     "); Serial.print(loc.longitude, 6); Serial.println("째");
    Serial.print("Altitude:      "); Serial.print(loc.altitude, 1); Serial.println(" m");
    
    // Method 3: Get all data at once (most efficient for complete info)
    Serial.println("\n=== Method 3: All Data Struct ===");
    GpsData data = gps.getAll();
    Serial.printf("Position:      %.6f째, %.6f째, %.1f m\n", 
                  data.latitude, data.longitude, data.altitude);
    Serial.printf("Fix/Sats:      %s / %d satellites\n", 
                  data.has_fix ? "YES" : "NO", data.satellites);
    Serial.printf("Speed:         %.2f knots (%.2f km/h)\n", 
                  data.speed_knots, data.speed_kmh);
    Serial.printf("Time:          %s UTC\n", data.time_utc.c_str());
    Serial.printf("Total NMEA:    %d sentences\n", data.total_sentences);
    Serial.printf("Last Update:   %lu ms ago\n", data.last_update_ms);
    
    Serial.println("\n=================================");
  }
}